- provide(:title, t('.title', username: @user.username))

.full-user-display
  %h1= @user.username
  .user-profile
    .user-profile-primary-info
      = render partial: "users/avatar", locals: { user: @user, size: "100" }
      - if @user.admin?
        %span.profile-user-status
          %span.moderator-text Administrator
      - elsif @user.moderator?
        %span.profile-user-status
          %span.moderator-text Moderator
      - if @user.initial_premium?
        %span.profile-user-status
          %span.supporter-text Supporter
      %span.profile-info-label= (t'.home-country')
      %span.profile-info-text= @user.home_country
      %span.profile-info-label= (t'.location')
      %span.profile-info-text= @user.location
      %span.profile-info-label= (t'.teaching-history')
      %span.profile-info-text= @user.teaching_history
      - unless @user.offsite_link.nil?
        %span.profile-info-label= (t'.offsite-link')
        %span.profile-info-text= @user.offsite_link
      - if user_signed_in? && current_user.admin?
        - if @user.sign_in_count < 1
          %span.profile-info-label Account unactivated
        - else
          %span.profile-info-label #{@user.sign_in_count} logins
          %span.profile-info-label Last seen:
          %span.profile-info-text= @user.current_sign_in_at.strftime("%b %d %Y")
          %span.profile-info-label Last IP:
          %span.profile-info-text= @user.last_sign_in_ip
        %span.profile-info-label Status:
        %span.profile-info-text= @user.role
        %span.profile-info-label Account created:
        %span.profile-info-text= @user.created_at.strftime("%b %d %Y")
          
      - if user_signed_in? && policy(@user).update?
        %ul.user-control-items
          %li= link_to "Edit your profile", edit_user_path(@user), class: "user-control primary-user-control"
          - if policy(@user).promote? 
            %li= link_to "Promote to mod", promote_user_path(@user), method: :put, data: { confirm: "Make this user a moderator?"}, class: "user-control"
          - if policy(@user).demote? 
            %li= link_to "Demote", demote_user_path(@user), method: :put, data: { confirm: "Demote this user?"}, class: "user-control"
          - if policy(@user).silence? 
            %li= link_to "Silence", silence_user_path(@user), method: :put, data: { confirm: "Silence this user?"}, class: "user-control"
          - if policy(@user).unsilence? 
            %li= link_to "Unsilence", unsilence_user_path(@user), method: :put, data: { confirm: "Desilence this user?"}, class: "user-control"
          - if policy(@user).trust? 
            %li= link_to "Trust", trust_user_path(@user), method: :put, data: { confirm: "Allow this user to post without mod review?"}, class: "user-control"
          - if policy(@user).untrust? 
            %li= link_to "Untrust", untrust_user_path(@user), method: :put, data: { confirm: "Remove this user's trusted status?"}, class: "user-control"
          - if policy(@user).delete? 
            %li= link_to "Delete account", @user, method: :delete, data: { confirm: "Delete this account and all of its activities?"}, class: "user-control"
    .user-profile-secondary-info
      .user-bio
        - unless @user.bio.nil?
          %span.profile-info-label= t('.bio')
          - if @user.initial_premium?
            = markdown(@user.bio, level: :permissive)
          - else
            = markdown(@user.bio)
      - if @user.activities.any?
        %span.profile-info-label= t('.activity-list')
        %ul.activity-tracker
          - @activities.each do |activity|
            %li.ticker-activity= link_to activity.name, activity, title: activity.short_description
        = paginate @activities
      - if ((user_signed_in? && ( current_user == @user || current_user.admin? )) || @user.display_favorites? ) && @upvotes.any?
        %span.profile-info-label= t('.upvotes')
        %ul.activity-tracker
          - @upvotes.each do |upvote|
            %li.ticker-activity= link_to upvote.activity.name, upvote.activity, title: upvote.activity.short_description
